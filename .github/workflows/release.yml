
name: Automated Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'major') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'patch'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/github @semantic-release/exec @semantic-release/changelog

      - name: Determine version type
        id: version-type
        run: |
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'major') }} == 'true' ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'minor') }} == 'true' ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Create temporary semantic-release config
        run: |
          cat > .releaserc.json << EOF
          {
            "branches": ["main", "master"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "build", "release": "${{ steps.version-type.outputs.type }}"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/github", {
                "successComment": "This PR is included in version \${nextRelease.version}",
                "failTitle": "The release failed",
                "failComment": "The release failed. Please try again."
              }],
              ["@semantic-release/exec", {
                "prepareCmd": "echo 'RELEASE_VERSION=\${nextRelease.version}' >> $GITHUB_ENV"
              }]
            ]
          }
          EOF

      - name: Force a commit to trigger release
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git commit --allow-empty -m "build: trigger ${{ steps.version-type.outputs.type }} release [skip ci]"

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

      - name: Set up Go
        if: env.RELEASE_VERSION != ''
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Run GoReleaser
        if: env.RELEASE_VERSION != ''
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}