
name: Automated Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

permissions:
  contents: write  # Explicitly grant write permission to repository contents

jobs:
  release:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'major') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'patch'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Determine next version
        id: semver
        run: |
          # Install semver tool
          npm install -g semver

          # Get latest tag or start with 0.0.0 if no tags exist
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_VERSION="0.0.0"
          else
            LATEST_VERSION=${LATEST_TAG#v}
          fi
          
          echo "Current version: $LATEST_VERSION"
          
          # Determine increment type based on PR label
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'major') }} == 'true' ]]; then
            NEXT_VERSION=$(semver -i major $LATEST_VERSION)
            RELEASE_TYPE="Major"
          elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'minor') }} == 'true' ]]; then
            NEXT_VERSION=$(semver -i minor $LATEST_VERSION)
            RELEASE_TYPE="Minor"
          else
            NEXT_VERSION=$(semver -i patch $LATEST_VERSION)
            RELEASE_TYPE="Patch"
          fi
          
          echo "Next version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "version=v$NEXT_VERSION" >> $GITHUB_OUTPUT

      # Create local tag that GoReleaser can use
      - name: Create local tag
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag -a v${{ env.NEXT_VERSION }} -m "${{ env.RELEASE_TYPE }} release: v${{ env.NEXT_VERSION }}"

      # Set environment variables for GoReleaser
      - name: Set environment for GoReleaser
        run: |
          # Extract repository owner and name from GITHUB_REPOSITORY
          REPO_PARTS=(${GITHUB_REPOSITORY//\// })
          echo "GITHUB_REPOSITORY_OWNER=${REPO_PARTS[0]}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=${REPO_PARTS[1]}" >> $GITHUB_ENV
          
          # Set PR details for release notes
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV

      # Set up Go for GoReleaser
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'

      # Run GoReleaser to build binaries and create release
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}