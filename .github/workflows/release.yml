name: Automated Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

permissions:
  contents: write  # Explicitly grant write permission to repository contents

jobs:
  release:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'major') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'patch'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Determine next version
        id: semver
        run: |
          # Install semver tool
          npm install -g semver

          # Get latest tag or start with 0.0.0 if no tags exist
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_VERSION="0.0.0"
          else
            LATEST_VERSION=${LATEST_TAG#v}
          fi
          
          echo "Current version: $LATEST_VERSION"
          
          # Determine increment type based on PR label
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'major') }} == 'true' ]]; then
            NEXT_VERSION=$(semver -i major $LATEST_VERSION)
            RELEASE_TYPE="Major"
          elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'minor') }} == 'true' ]]; then
            NEXT_VERSION=$(semver -i minor $LATEST_VERSION)
            RELEASE_TYPE="Minor"
          else
            NEXT_VERSION=$(semver -i patch $LATEST_VERSION)
            RELEASE_TYPE="Patch"
          fi
          
          echo "Next version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "version=v$NEXT_VERSION" >> $GITHUB_OUTPUT

      # Simply create a GitHub release with the source code
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEXT_VERSION }}
          release_name: v${{ env.NEXT_VERSION }}
          body: |
            ## ${{ env.RELEASE_TYPE }} Release v${{ env.NEXT_VERSION }}
            
            This release was automatically generated from PR #${{ github.event.pull_request.number }}: [${{ github.event.pull_request.title }}](${{ github.event.pull_request.html_url }})
            
            ### Changes
            
            - ${{ github.event.pull_request.title }}
          draft: false
          prerelease: false
          generate_release_notes: true
